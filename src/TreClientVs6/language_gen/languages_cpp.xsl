<?xml version="1.0" ?> 
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
<xsl:output method="text" indent="yes" encoding="iso-8859-1" />
<!-- xsl file to generate languages class-->

<!-- FILE -->
<xsl:template match="file">
// <xsl:value-of select="name"/>.cpp
// used to handle languages resource 
// Automatic generated header file by xml->xslt
// DO NOT EDIT THIS FILE, IT WILL BE OVERWRITTEN BY GENERATOR
// CHANGE XML FILE INSTEAD

<!-- insert carriage returns-->
<xsl:text>  &#10;</xsl:text>

#include "StdAfx.h"
#include "win_type_global.h"
#include "lang_gen.h"
#include &#60;assert.h&#62;

static std::string sta_strRet ="Err trans.";

<xsl:text>  &#10;&#10;&#10; </xsl:text>
<xsl:apply-templates select="class_languag"/>

</xsl:template> 


<!-- implementation of the class -->
<xsl:template match="class_languag">

 <xsl:value-of select="name"/>* <xsl:value-of select="name"/>::pinstance = 0;// initialize pointer
  <xsl:value-of select="name"/>* <xsl:value-of select="name"/>::Instance () 
  {
    if (pinstance == 0)  // is it the first call?
    {  
      pinstance = new <xsl:value-of select="name"/>; // create sole instance
    }
    return pinstance; // address of sole instance
  }

//! constructor
<xsl:value-of select="name"/>::<xsl:value-of select="name"/>()
{
	for (int i = 0; i&#60; TOT_STRINGS; i++)
    {
        for (int j = 0; j &#60; TOT_LANG; j++)
        {
            m_matStringsLang[j][i] = "No Translation!";
        }
    }
    m_eLangid = LANG_ITA;
<xsl:for-each select="lan_names/item_lan">
    <xsl:variable name="namelanid"><xsl:value-of select="ID"/></xsl:variable>
    <xsl:variable name="nametaglan"><xsl:value-of select="TAG"/></xsl:variable>
<xsl:for-each select="//item_s">
	<xsl:choose>
		<xsl:when test="$nametaglan = 0">
	m_matStringsLang[<xsl:value-of select="$namelanid"/>][<xsl:value-of select="ID"/>] = "<xsl:value-of select="L0"/>";
		</xsl:when>
		<xsl:when test="$nametaglan = 1">
	m_matStringsLang[<xsl:value-of select="$namelanid"/>][<xsl:value-of select="ID"/>] = "<xsl:value-of select="L1"/>";
		</xsl:when>		
	    <xsl:when test="$nametaglan = 2">
	m_matStringsLang[<xsl:value-of select="$namelanid"/>][<xsl:value-of select="ID"/>] = "<xsl:value-of select="L2"/>";
		</xsl:when>	
		    <xsl:when test="$nametaglan = 3">
	m_matStringsLang[<xsl:value-of select="$namelanid"/>][<xsl:value-of select="ID"/>] = "<xsl:value-of select="L3"/>";
		</xsl:when>	

	</xsl:choose> 
</xsl:for-each>
</xsl:for-each>
}


std::string cLanguages::GetStringId(eStringID eId)
{
    
    assert(eId &#60; TOT_STRINGS);

    if (eId &#60; TOT_STRINGS)
    {
        sta_strRet = m_matStringsLang[m_eLangid][eId];
    }

    return sta_strRet;
}

char*  cLanguages::GetCStringId(eStringID eId)
{
    

    assert(eId &#60; TOT_STRINGS);

    if (eId &#60; TOT_STRINGS)
    {
        sta_strRet = m_matStringsLang[m_eLangid][eId];
    }

    return const_cast&#60;char*&#62;(sta_strRet.c_str()) ;
}


</xsl:template> 


</xsl:stylesheet> 